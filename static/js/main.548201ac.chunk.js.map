{"version":3,"sources":["components/user-type-select/user-type-select.module.scss","components/message-form/message-form.module.scss","components/container/container.module.scss","components/connection-status/connection-status.module.scss","components/id-card/id-card.module.scss","components/chat-section/chat-section.module.scss","components/message-list/message-list.module.scss","components/connection-display/connection-display.module.scss","components/connection-status/connection-status.component.jsx","components/id-card/id-card.component.jsx","components/user-id-display/user-id-display.component.jsx","components/other-id-form/other-id-form.component.jsx","components/peer-id-section/peer-id-section.component.jsx","components/message-form/message-form.component.jsx","components/message-list/message-list.component.jsx","components/chat-section/chat-section.component.jsx","components/connection-display/connection-displya.components.jsx","components/user-type-select/user-type-select.component.jsx","components/container/container.component.jsx","App.js","serviceWorker.js","index.js","components/other-id-form/other-id-form.module.scss"],"names":["module","exports","container","title","button","form","input","status","card","label","list","listItem","ConnectionStatus","_ref","setIsConnected","peer","useContext","PeerContext","_useState","useState","_useState2","Object","slicedToArray","connectionStatus","setConnectionStatus","useEffect","on","react_default","a","createElement","className","style","IdCard","id","JSON","stringify","UserIdDisplay","userId","setUserId","data","id_card_component","OtherIdForm","setOtherId","otherIdInput","useFormInut","onSubmit","e","preventDefault","trimedValue","value","trim","otherId","parse","console","log","signal","heading","assign","textarea","PeerIdSection","other_id_form_component","MessageForm","addMessage","messageInput","message","send","setValue","MessageList","messages","map","i","key","ChatSection","setMessages","concat","toConsumableArray","TextDecoder","decode","message_form_component","length","message_list_component","ConnectionDisplay","options","isConnected","peer_context","connection_status_component","chat_section_component","user_id_display_component","peer_id_section_component","UserTypeSelect","setOptions","onClick","initiator","Containerr","connection_displya_components","user_type_select_component","App","container_component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.548201ac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"user-type-select_container__2b1HD\",\"title\":\"user-type-select_title__12hnM\",\"button\":\"user-type-select_button__2qh8y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"message-form_form__1-4sx\",\"input\":\"message-form_input__2WjEe\",\"button\":\"message-form_button__3dUg8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"container_container__AQddp\",\"title\":\"container_title__2eTKJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"status\":\"connection-status_status__pjtXu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"id-card_card__2uAiN\",\"label\":\"id-card_label__3irN_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"chat-section_container__14xhy\",\"title\":\"chat-section_title__3LP_d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"message-list_list__eTF0W\",\"listItem\":\"message-list_listItem__3eVs_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"connection-display_container__2Iym-\"};","import React, { useState, useEffect, useContext } from 'react';\n\nimport style from './connection-status.module.scss';\n\nimport { PeerContext } from 'contexts/peer-context';\n\nconst ConnectionStatus = ({ setIsConnected }) => {\n\tconst peer = useContext(PeerContext);\n\tconst [connectionStatus, setConnectionStatus] = useState('No Connection');\n\n\tuseEffect(() => {\n\t\tif (!peer) return;\n\n\t\tpeer.on('connect', () => {\n\t\t\tsetIsConnected(true);\n\t\t\tsetConnectionStatus('Connected!!!');\n\t\t});\n\t}, [peer, setIsConnected]);\n\n\treturn (\n\t\t<div className={style.container}>\n\t\t\t<p className={style.status}>{connectionStatus}</p>\n\t\t</div>\n\t);\n};\n\nexport default ConnectionStatus;\n","import React from 'react';\n\nimport style from './id-card.module.scss';\n\nconst IdCard = ({ label, id }) => {\n\treturn (\n\t\t<div className={style.card}>\n\t\t\t<h2 className={style.label}>{label}</h2>\n\t\t\t<p>{id ? JSON.stringify(id) : 'No Id Found.'}</p>\n\t\t</div>\n\t);\n};\n\nexport default IdCard;\n","import React, { useState, useEffect, useContext } from 'react';\n\nimport { PeerContext } from 'contexts/peer-context';\nimport IdCard from '../id-card/id-card.component';\n\nconst UserIdDisplay = () => {\n\tconst peer = useContext(PeerContext);\n\tconst [userId, setUserId] = useState('');\n\n\tuseEffect(() => {\n\t\tif (!peer) return;\n\n\t\tpeer.on('signal', data => {\n\t\t\tif ('type' in data) {\n\t\t\t\tsetUserId(data);\n\t\t\t}\n\t\t});\n\t}, [peer]);\n\n\treturn <IdCard label='Your Id' id={userId} />;\n};\n\nexport default UserIdDisplay;\n","import React, { useContext } from 'react';\n\nimport style from './other-id-form.module.scss';\n\nimport useFormInut from 'hooks/useFormInput';\nimport { PeerContext } from 'contexts/peer-context';\n\nconst OtherIdForm = ({ setOtherId }) => {\n\tconst otherIdInput = useFormInut('');\n\tconst peer = useContext(PeerContext);\n\n\tconst onOtherIdSubmit = e => {\n\t\te.preventDefault();\n\n\t\tconst trimedValue = otherIdInput.value.trim();\n\t\tif (!trimedValue) return;\n\n\t\tconst otherId = JSON.parse(trimedValue);\n\t\tsetOtherId(otherId);\n\t\tconsole.log({ otherId });\n\t\tpeer.signal(trimedValue);\n\t};\n\n\treturn (\n\t\t<form className={style.form} onSubmit={onOtherIdSubmit}>\n\t\t\t<h2 className={style.heading}>Other Id</h2>\n\t\t\t<textarea className={style.textarea} {...otherIdInput} />\n\t\t\t<button className={style.button}>save</button>\n\t\t</form>\n\t);\n};\n\nexport default OtherIdForm;\n","import React, { useState } from 'react';\n\nimport IdCard from '../id-card/id-card.component';\nimport OtherIdForm from '../other-id-form/other-id-form.component';\n\nconst PeerIdSection = () => {\n\tconst [otherId, setOtherId] = useState('');\n\n\treturn (\n\t\t<div>\n\t\t\t{otherId ? (\n\t\t\t\t<IdCard label='Other Id' id={otherId} />\n\t\t\t) : (\n\t\t\t\t<OtherIdForm setOtherId={setOtherId} />\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default PeerIdSection;\n","import React, { useContext } from 'react';\n\nimport style from './message-form.module.scss';\n\nimport useFormInut from 'hooks/useFormInput';\nimport { PeerContext } from 'contexts/peer-context';\n\nconst MessageForm = ({ addMessage }) => {\n\tconst peer = useContext(PeerContext);\n\tconst messageInput = useFormInut('');\n\n\tconst onMessageSubmit = e => {\n\t\te.preventDefault();\n\n\t\tconst { value: message } = messageInput;\n\t\tpeer.send(message);\n\t\taddMessage(message);\n\t\tmessageInput.setValue('');\n\t};\n\n\treturn (\n\t\t<form className={style.form} onSubmit={onMessageSubmit}>\n\t\t\t<input className={style.input} {...messageInput} />\n\t\t\t<button className={style.button}>send</button>\n\t\t</form>\n\t);\n};\n\nexport default MessageForm;\n","import React from 'react';\n\nimport style from './message-list.module.scss';\n\nconst MessageList = ({ messages }) => {\n\treturn (\n\t\t<ul className={style.list}>\n\t\t\t{messages.map((message, i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<li key={i} className={style.listItem}>\n\t\t\t\t\t\t{message}\n\t\t\t\t\t</li>\n\t\t\t\t);\n\t\t\t})}\n\t\t</ul>\n\t);\n};\n\nexport default MessageList;\n","import React, { useState, useEffect, useContext } from 'react';\n\nimport style from './chat-section.module.scss';\n\nimport { PeerContext } from 'contexts/peer-context';\n\nimport MessageForm from '../message-form/message-form.component';\nimport MessageList from '../message-list/message-list.component';\n\nconst ChatSection = () => {\n\tconst peer = useContext(PeerContext);\n\tconst [messages, setMessages] = useState([]);\n\n\tconst addMessage = message => {\n\t\tsetMessages(messages => {\n\t\t\treturn [...messages, message];\n\t\t});\n\t};\n\n\tuseEffect(() => {\n\t\tif (!peer) return;\n\n\t\tpeer.on('data', data => {\n\t\t\tconst message = new TextDecoder('utf-8').decode(data);\n\t\t\taddMessage(message);\n\t\t});\n\t}, [peer]);\n\n\treturn (\n\t\t<section className={style.container}>\n\t\t\t<h2 className={style.title}>CHAT ROOM</h2>\n\t\t\t<MessageForm addMessage={addMessage} />\n\t\t\t{messages.length > 0 && <MessageList messages={messages} />}\n\t\t</section>\n\t);\n};\n\nexport default ChatSection;\n","import React, { useState } from 'react';\n\nimport style from './connection-display.module.scss';\n\nimport { PeerProvider } from 'contexts/peer-context';\n\nimport ConnectionStatus from '../connection-status/connection-status.component';\nimport UserIdDisplay from '../user-id-display/user-id-display.component';\nimport PeerIdSection from '../peer-id-section/peer-id-section.component';\nimport ChatSection from '../chat-section/chat-section.component';\n\nconst ConnectionDisplay = ({ options }) => {\n\tconst [isConnected, setIsConnected] = useState();\n\n\treturn (\n\t\t<PeerProvider options={options}>\n\t\t\t<div className={style.container}>\n\t\t\t\t<ConnectionStatus setIsConnected={setIsConnected} />\n\t\t\t\t{isConnected && <ChatSection />}\n\t\t\t\t<UserIdDisplay />\n\t\t\t\t<PeerIdSection />\n\t\t\t</div>\n\t\t</PeerProvider>\n\t);\n};\n\nexport default ConnectionDisplay;\n","import React from 'react';\n\nimport style from './user-type-select.module.scss';\n\nconst UserTypeSelect = ({ setOptions }) => {\n\treturn (\n\t\t<div className={style.container}>\n\t\t\t<h1 className={style.title}>Select user type</h1>\n\t\t\t<button\n\t\t\t\tclassName={style.button}\n\t\t\t\tonClick={() => setOptions({ initiator: true })}\n\t\t\t>\n\t\t\t\tHost\n\t\t\t</button>\n\t\t\t<button\n\t\t\t\tclassName={style.button}\n\t\t\t\tonClick={() => setOptions({ initiator: false })}\n\t\t\t>\n\t\t\t\tGuest\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nexport default UserTypeSelect;\n","import React, { useState } from 'react';\n\nimport style from './container.module.scss';\n\nimport ConnectionDisplay from '../connection-display/connection-displya.components';\nimport UserTypeSelect from '../user-type-select/user-type-select.component';\n\nconst Containerr = () => {\n\tconst [options, setOptions] = useState(null);\n\n\treturn (\n\t\t<div className={style.container}>\n\t\t\t<h1 className={style.title}>Peer to Peer Chat Demo</h1>\n\t\t\t{options ? (\n\t\t\t\t<ConnectionDisplay options={options} />\n\t\t\t) : (\n\t\t\t\t<UserTypeSelect setOptions={setOptions} />\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default Containerr;\n","import React from 'react';\nimport Container from './components/container/container.component';\nfunction App() {\n\treturn (\n\t\t<div className='App'>\n\t\t\t<Container />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/main.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"other-id-form_form__3A4dT\",\"heading\":\"other-id-form_heading__1M1BS\",\"textarea\":\"other-id-form_textarea__nlgqQ\",\"button\":\"other-id-form_button__FhdO6\"};"],"sourceRoot":""}